# Assignment 3

#Exercise 8.1, 8.2, 8.4, 8.5, 8.6, 8.9, 8.10
#Exercise 10.1, 10.2, 10.3, 10.4
#Exercise 11.1, 11.2, 11.3, 11.4, 11.5
#------------------------------------------------------

#.......Chapter 8



# Exercise 8.1

print 'Exercise 8.1'

#Write a function that takes a string as an argument and displays the letters #backward,one per line.

def backward_disp(a):

	""" A function that takes a string as an argument and displays
	    its letters backward, one per line.
	"""
	
	index=1
	while index<len(a)+1:
		letter=a[len(a)-index]
		print letter,'\n'
		index=index+1

backward_disp('hello')

print '\n'

# Exercise 8.2

print 'Exercise 8.2\n'

#Modify the program to fix this error.

#Least efficient way to approach the problem
#is to print each individually, second least is this...

prefixes='JKLMNOPQ'
suffix='ack'

for i in range (5):
	print prefixes[i]+suffix
print prefixes[5]+'u'+suffix
print prefixes[6]+suffix
print prefixes[7]+'u'+suffix

print '\n' #This is more efficient than above...

index=0

for i in range (len(prefixes)):
	if index==5:
		print prefixes[i]+'u'+suffix
		index=index+1
	
	elif index==7:
		print prefixes[i]+'u'+suffix
		index=index+1
	else:
		print prefixes[i]+suffix
		index=index+1
	
		
print '\n'

# Most efficient way that I found...

for char in prefixes:
	if char== 'O':
		print char+'u'+suffix
	elif char== 'Q':	
		print char+'u'+suffix # Have to use an elif statement for this to work
				      # properly
	else:
		print char+suffix

print '\n'



# Exercise 8.3

print 'Exercise 8.3\n'
	
# if fruit= 'banana' then fruit[:] is banana...all entries

fruit='banana'

print fruit[:]

print'\n'


# Exercise 8.4

print 'Exercise 8.4\n'

# Modify find to tell it where to start looking

def find(word, letter,starting_index):
	index = starting_index
	while index < len(word):
		if word[index] == letter:
			print letter+' is located at',index
			index = index + 1
		else:
			index=index+1
	print 'done'

find('hello','l',1)

print '\n'


# Exercise 8.5

print'Exercise 8.5\n'

# Encapsulate the code to create a function count

def count(word, letter):

	"""A function that takes a string and searches for the number
	   of times a specified letter (as a string as well) 
	   appears in the string. The function then returns this value.
	"""

	count=0
	for char in word:
		if char==letter:
			count=count+1
	print 'The letter '+letter+' is found',count,'time(s) in the word '+word

count('hello','o')

print '\n'


# Exercise 8.6

print 'Exercise 8.6\n'

#Add third parameter--starting point

def count_start(word,letter,starting_index):

	"""A function that counts the number of times a letter (string)
	   appears in a given string. One can specify the starting index.
	"""
	count=0
	index=starting_index
	while index<len(word):
		if word[index]==letter:
			count=count+1
			index=index+1
		else:
			index=index+1
	print 'The letter '+letter+' is found',count,' time(s) in the word '+word+' starting at index',starting_index

count_start('hello','l',3) #because we are starting after the first l, we 
			   #expect to find 1.

print '\n'


# Exercise 8.7

print 'Exercise 8.7\n'

name ='banana'
letter='a'
print name.count(letter)

print'\n'


# Exercise 8.8

# The second error in the function is that the loop
# has a condition of j>0. In order to include the the 
# final i and j values, 3 and 0 the condition needs to 
# be change to include 0. So j>=0




# Exercise 8.9

print 'Exercise 8.9\n'

def is_palindrome(a):
	
	"""This is a function that takes a string and informs the user whether 
	   or not the string which they have input is a palindrome
	"""
	if a==a[::-1]:
		print a+' is a palindrome'
	else:
		print a+' is not a palindrome'

is_palindrome('kool')
is_palindrome('racecar')

print '\n'

#-------------------------------------------------------------------

#......Chapter 10



# Exercise 10.1

print 'Exercise 10.1\n'


def count_sum(a):

	"""Takes a list, a, and returns the cumulative sum.
	"""
	b=[a[0]]
	
	for i in range(len(a)):
		if i>0:
			b.append(a[i]+b[i-1])
	print b

a=[1,2,3]
count_sum(a)


print '\n'


# Exercise 10.2

print 'Exercise 10.2\n'

def chop(a):

	"""Modifies the list a by removing the first and last entries.
	"""

	del a[0]
	del a[len(a)-1]

	print a

a=['a','b','n','m','l']
chop(a)

print '\n'


# Exercise 10.3

print 'Exercise 10.3\n'

def is_sorted(a):

	"""Tells the user whether or not the list a is sorted in ascending order/
	"""

	for i in range(len(a)-1):
		x=i+1
		if a[x]<a[i]:
			print a[i]
			print a[x]
			print 'False, list is not sorted :('
			break
		elif a[len(a)-1]>a[len(a)-2]:
			print 'True. List is sorted!'

a=['a','b']
is_sorted(a)

b=['b','a']
is_sorted(b)

print '\n'


# Exercise 10.4

print 'Exercise 10.4\n'

def anagram(a,b):

	""" Takes two strings, a and b, and checks if b is an anagram.
	    Returns True or False.
	"""
	
	c=list(a)
	d=list(b)
	count_d=[0]*(len(d))
	if b in a:
		print 'True'
		
	
	for i in range(len(d)):
		for j in range(len(c)):
			
			if d[i] in a[j]:
				count_d[i]=1
			print d[i]
			print c[j]
			print count_d[i]

	if sum(count_d)==len(d):
		print 'True'
	else:
		print 'False'
				

a='banana'
b='aw'
anagram(a,b)

print '\n'


#----------------------------------------------------------------------------

#................ Chapter 11


# Exercise 11.1

print 'Exercise 11.1\n'

def check_dict(a):

	"""Checks whether the string a is in the dictionary. Returns True or False.
	"""
	b=[]
	c=open('words.txt')
	for line in c:
		d=line.strip()
		b.append(d)
	if a in b:
		print 'True'
	else:
		print 'False'

check_dict('aa')

print '\n'


# Exercise 11.2

print 'Exercise 11.2\n'

def histogram(s):
	
	d=dict()
	for c in s:
		
		d[c]=1
		d.get('c',d[c])
		
	return d


